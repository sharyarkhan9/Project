[0m[[0m[0mdebug[0m] [0m[0m> Exec(~run, Some(7649ea57-756e-441c-8ed6-f90cec3901d7), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__runWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtStashOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__preWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@31c7c281, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/Family/Desktop/Project0/project/src/main/scala/Project0.scala","languageId":"scala","version":1,"text":"import java.util.Scanner\r\nimport scala.collection.mutable.ArrayBuffer\r\nimport java.util.Calendar\r\nimport java.sql.DriverManager\r\nimport java.sql.Connection\r\nimport java.io.PrintWriter\r\nimport java.io.File\r\n\r\nobject Project0 {\r\n    def main(arg:Array[String]): Unit = {   \r\n        val driver = \"com.mysql.cj.jdbc.Driver\"\r\n        val url = \"jdbc:mysql://localhost:3306/project\"\r\n        val username = \"root\"\r\n        val password = \"F@ith6193\" \r\n        val log = new PrintWriter(new File(\"query.log\"))\r\n        var connection:Connection = null\r\n        Class.forName(driver)\r\n        connection = DriverManager.getConnection(url, username, password)\r\n        val statement = connection.createStatement()   \r\n        var scanner = new Scanner(System.in)\r\n        var choice = 0\r\n        while (choice != 5) {\r\n            println(\"Pleaes Choose an option using number keys 1 - 5: \")\r\n            println(\"1: Create a to-do list\\n2: Remove a to-do list\\n3: Print all to-do lists\\n4: Update a to-do list\\n5: Exit\")\r\n            try {\r\n                choice = scanner.nextInt()\r\n               \r\n            }catch {\r\n                case e: Exception => print(\"Exception thrown - Non numeric key entered. \")\r\n            }\r\n            scanner.nextLine()\r\n                if (choice == 1){\r\n                    println(\"Please enter items for your to do list:\")\r\n                    var item = scanner.nextLine()\r\n                    var str2 = \"\"\r\n                    str2 += (\"'\"+item+\"'\")\r\n                    statement.executeUpdate(\"create table project0 (id int NOT NULL AUTO_INCREMENT, todo CHAR(255), PRIMARY KEY (id));\")\r\n                    statement.executeUpdate(\"INSERT INTO project0 (todo) Values (\"+str2+\")\")\r\n                    log.write(Calendar.getInstance().getTimeInMillis + \": Executing - INSERT INTO project0 (todo) Values (\"+str2+\")\\n\")\r\n                }\r\n                else if (choice ==2){\r\n                    println(\"Please enter an id corresponding to the to do list you want removed:\")\r\n                    var item = scanner.nextInt()\r\n                    statement.executeUpdate(\"DELETE FROM project0 WHERE id=(\"+item+\")\")\r\n                    log.write(Calendar.getInstance().getTimeInMillis + \"- Executing - DELETE FROM project0 WHERE id=(\"+item+\")\\n\")\r\n                }\r\n                else if (choice ==3){\r\n                    val resultSet = statement.executeQuery(\"SELECT * FROM project0\")\r\n                    while ( resultSet.next() ) {\r\n                        print(resultSet.getString(1) + \" \" + resultSet.getString(2))\r\n                        println()\r\n                    log.write(Calendar.getInstance().getTimeInMillis + \": Executing - SELECT * FROM project0\\n\")\r\n                    }\r\n                }\r\n                else if (choice ==4){\r\n                    println(\"Please enter an id corresponding to the to do list you want to update:\")\r\n                    var item = scanner.nextInt()\r\n                    var str = \"\"\r\n                    scanner.nextLine()\r\n                    println(\"Please enter the new to-do List: \")\r\n                    var todo = scanner.nextLine()\r\n                    str += (\"'\"+todo+\"'\")\r\n                    statement.executeUpdate(\"update project0 set todo = (\"+str+\") where id =(\"+item+\")\")\r\n                    log.write(Calendar.getInstance().getTimeInMillis + \": Executing - update project0 set todo = (\"+str+\") where id =(\"+item+\")\\n\")\r\n              \r\n                }\r\n\r\n                else if (choice ==5){\r\n                    println(\"Your TO-DO list has been saved. Thank you\") \r\n                    connection.close()\r\n                    log.close()\r\n                    \r\n                }\r\n                else {\r\n                    println(\"Please only enter numbers 1 - 5\")\r\n                    \r\n                }\r\n                 \r\n             \r\n        }\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"\tThread run-main-0 exited."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Interrupting remaining threads (should be all daemons)."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Interrupting thread mysql-cj-abandoned-connection-cleanup"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"\tInterrupted mysql-cj-abandoned-connection-cleanup"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Sandboxed run complete.."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Exited with code 0"})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 46 s, completed Jan 12, 2022 10:26:05 AM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(resumeFromFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtPopOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__postWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__waitWatch console0, None, Some(CommandSource(console0)))[0m
